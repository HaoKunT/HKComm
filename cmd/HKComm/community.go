package HKComm

/*
需要实现的功能
1. 两个终端的即时通讯
2. 群功能
3. 好友功能
4. 文件传递功能
5. 历史记录功能
*/
// 实现逻辑
/*
接收和发送在不同的gorouties里面，中间采用通道进行通讯
问题：
在udp服务器中如何分辨是哪个用户发来的消息
解决方案：
1. udp发送时携带用户信息：携带用户id号，int值，只需要4字节即可搞定
问题：
反向发送数据如何保证数据接收到了？
解决方案：
1. 使用TCP，放弃UDP方案
2. 对UDP做一定的控制
3. 采用同步机制，即隔一段时间客户端向服务器发送同步指令
4. 通讯整体采用websocket方案

最终思路：
采用websocket方案进行开发，认证使用session进行认证即可

通道中需要包含发送的对象和发送的消息两部分数据

一个map数据结构用于维持已有的所有连接上的连接，其中map的key为用户名称，表明此连接的客户端对应的用户是哪个，
value是对应的连接列表，因为可能一个用户有多个客户端在线

当websocket建立之后注册接收到消息的回调，回调函数中读取接收到的消息，其中包含消息发送的对象（用户名）
解析消息结构完成后将消息传递给通道，由发送消息的函数根据用户名找到用户对应的连接，并将消息在此websocket上发送出去。
若接收消息的用户没有在线，则将消息暂存在内存中，等用户上线后再将消息发送出去

群聊功能：
将所有处于一个群内的用户加入至同一room内，发送至群聊的消息将向整个群聊发送
需要设定数据库表
问题待解决：
会向自己发送吗？（貌似会）

好友功能：
设定好友关系列表（数据库），客户端本地缓存好友信息，如果是第一次登录则向服务器请求好友信息（http）

文件传输功能
离线传输和在线传输
小文件默认直接离线传输，大文件默认在线传输，其中可切换
离线传输比较简单，向服务器发送文件，文件标明双方的用户id，将文件存储至数据库（http），并向接收方发送websocket消息，接收方发送接收文件请求，由服务器发送文件
在线传输则首先发送一个文件传输请求，请求中需要标明双方用户，向文件接收方发送websocket消息
问题：
采用类似内网穿透的方式直接让双方接收文件？

*/

// 用于接收消息的函数
func recive() {

}

// 用于发送消息的函数
func send() {

}

// 实现接收和发送的逻辑
func community() {

}
